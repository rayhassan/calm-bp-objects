{"status":{},"contains_secrets":false,"product_version":"2.9.0","spec":{"description":"Create and Monitor an S3 compliant Nutanix Object Store via REST-API calls","resources":{"client_attrs":{"d92162bb_deployment":{"y":202.5714285714,"x":209.5}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"cb0e9445_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"49bb1c2f_runbook","main_task_local_reference":{"kind":"app_task","name":"cb0e9445_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"68bfa158_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"fbea3881_runbook","main_task_local_reference":{"kind":"app_task","name":"68bfa158_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9b2f8b90_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1401904c_runbook","main_task_local_reference":{"kind":"app_task","name":"9b2f8b90_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"21d3be3e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7bddf091_runbook","main_task_local_reference":{"kind":"app_task","name":"21d3be3e_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9430343e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"489459e0_runbook","main_task_local_reference":{"kind":"app_task","name":"9430343e_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"Object_Store","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"INFRA","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CLIENT","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CLUSTER","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"OBJECTSTORE","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"VCPU_COUNT","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"MEMORY_SIZE_MIB","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Object_StorePC"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"74bc5042_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"abbe74c0_runbook","main_task_local_reference":{"kind":"app_task","name":"74bc5042_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Object_StorePC"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"42c74199_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4cb542b5_runbook","main_task_local_reference":{"kind":"app_task","name":"42c74199_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"EXISTING_VM","name":"Object_StorePC","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{ip_address}@@","delay_secs":"60","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"Prism_Central"}},"os_type":"Linux","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"localhost"},"variable_list":[]}],"credential_definition_list":[{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Prism_Central"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Object_Store"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"581cb503_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5a6002e8_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"581cb503_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"bf3d86a6_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"fb7d02f0_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"bf3d86a6_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"d92162bb_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"Object_StorePC"},"variable_list":[],"description":""}],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"GetClusterUUID"},{"kind":"app_task","name":"GetInfraNetUUID"},{"kind":"app_task","name":"GetClientNetUUID"},{"kind":"app_task","name":"CreateObjectstore"}],"name":"1b0c6b26_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"GetClusterUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"GetInfraNetUUID"}},{"from_task_reference":{"kind":"app_task","name":"GetInfraNetUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"GetClientNetUUID"}},{"from_task_reference":{"kind":"app_task","name":"GetClientNetUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"CreateObjectstore"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"GetClusterUUID","attrs":{"exit_status":[],"script":"# Set the credentials\npc_user = '@@{Prism_Central.username}@@'\npc_pass = '@@{Prism_Central.secret}@@'\n\n# script\n# Get the JWT\n#jwt = '@@{calm_jwt}@@'\n\n# Set the headers, url, and payload\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nurl     = \"https:\/\/@@{address}@@:9440\/api\/nutanix\/v3\/clusters\/list\"\npayload = {}\n\n# Make the request\nresp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass, params=json.dumps(payload), headers=headers)\n\n# If the request went through correctly, print it out.  Otherwise error out, and print the response.\nif resp.ok:# Cycle through the cluster \"entities\", and check if its cluster name matches and then print uuid\n    for cluster in json.loads(resp.content)['entities']:\n        if cluster['spec']['name'] == '@@{cluster_name}@@':\n        \n            if 'hypervisor_server_list' in cluster['status']['resources']['nodes']:\n                nodes = len(cluster['status']['resources']['nodes']['hypervisor_server_list'])\n                node_range = range(nodes)\n                for node in node_range:\n                    hypervisor_type = cluster['status']['resources']['nodes']['hypervisor_server_list'][node]['type']\n                    if  hypervisor_type != \"AHV\":\n                        print(\"Unsupported Hypervisor type : %s, exiting\" % hypervisor_type)\n                        exit(1)\n\n            if 'version' in cluster['spec']['resources']['config']['software_map']['NOS']:\n                aos_version = (cluster['spec']['resources']['config']['software_map']['NOS']['version'])\n                major_minor=aos_version.split('.')\n                if major_minor[0] < '5':\n                    print (\"Unsupported AOS version : %s , exiting\" % aos_version)\n                    exit(1)\n                elif major_minor[0] == '5' and major_minor[1] < '11':\n                    print (\"Unsupported AOS version : %s, exiting\" % aos_version)\n                    exit(1)\n            \n            # print UUID to set variable and exit success, otherwise error out\n            if 'uuid' in cluster['metadata']:\n                print \"CLUSTER={0}\".format(cluster['metadata']['uuid'])\n                exit (0)\n            else:\n                print \"The '@@{cluster_name}@@' cluster - unable to find UUID.\"\n                exit(1)\n\n       \n    # If we've reached this point in the code, none of our clusters matched any cluster name macro\n    print \"The '@@{cluster_name}@@' cluster does not match any cluster names in our \/clusters\/list api call.\"\n    print json.dumps(json.loads(resp.content), indent=4)\n    exit(0)\n     \nelse:\n   print \"Post request failed\", resp.content\n   exit(1)\n","eval_variables":["CLUSTER"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"GetInfraNetUUID","attrs":{"exit_status":[],"script":"# Set the credentials\n# pc_user = '@@{Prism_Central.username}@@'\n# pc_pass = '@@{Prism_Central.secret}@@'\n\n# script\n# Get the JWT\njwt = '@@{calm_jwt}@@'\n\n# Set the headers, url, and payload\n#headers = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nurl     = \"https:\/\/@@{address}@@:9440\/api\/nutanix\/v3\/subnets\/list\"\npayload = {}\n\n# Make the request\n# resp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass, params=json.dumps(payload), headers=headers)\nresp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)\n\n# If the request went through correctly, print it out.  Otherwise error out, and print the response.\nif resp.ok:# Cycle through the subnet \"entities\", and check if its network name matches and then print uuid\n    for subnet in json.loads(resp.content)['entities']:\n        if subnet['spec']['name'] == '@@{infra_network}@@':\n            # print UUID to set variable and exit success, otherwise error out\n            if 'uuid' in subnet['metadata']:\n                print \"INFRA={0}\".format(subnet['metadata']['uuid'])\n                exit (0)\n            else:\n                print \"The '@@{infra_network}@@' network - unable to find UUID.\"\n                exit(1)\n\n       \n    # If we've reached this point in the code, none of our subnets matched any network name macro\n    print \"The '@@{infra_network}@@' subnet does not match any network names in our \/subnets\/list api call.\"\n    print json.dumps(json.loads(resp.content), indent=4)\n    exit(0)\n     \nelse:\n   print \"Post request failed\", resp.content\n   exit(1)\n","eval_variables":["INFRA"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"GetClientNetUUID","attrs":{"exit_status":[],"script":"# Set the credentials\n#pc_user = '@@{Prism_Central.username}@@'\n#pc_pass = '@@{Prism_Central.secret}@@'\n\n# script\n# Get the JWT\njwt = '@@{calm_jwt}@@'\n\n# Set the headers, url, and payload\n#headers = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nurl     = \"https:\/\/@@{address}@@:9440\/api\/nutanix\/v3\/subnets\/list\"\npayload = {}\n\n# Make the request\n# resp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass, params=json.dumps(payload), headers=headers)\nresp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)\n\n# If the request went through correctly, print it out.  Otherwise error out, and print the response.\nif resp.ok:# Cycle through the subnet \"entities\", and check if its network name matches and then print uuid\n    for subnet in json.loads(resp.content)['entities']:\n        if subnet['spec']['name'] == '@@{client_network}@@':\n            # print UUID to set variable and exit success, otherwise error out\n            if 'uuid' in subnet['metadata']:\n                print \"CLIENT={0}\".format(subnet['metadata']['uuid'])\n                exit (0)\n            else:\n                print \"The '@@{client_network}@@' network - unable to find UUID.\"\n                exit(1)\n\n       \n    # If we've reached this point in the code, none of our subnets matched any network name macro\n    print \"The '@@{client_network}@@' subnet does not match any network names in our \/subnets\/list api call.\"\n    print json.dumps(json.loads(resp.content), indent=4)\n    exit(0)\n     \nelse:\n   print \"Post request failed\", resp.content\n   exit(1)\n","eval_variables":["CLIENT"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"CreateObjectstore","attrs":{"exit_status":[],"script":"# Set the credentials\npc_user = '@@{Prism_Central.username}@@'\npc_pass = '@@{Prism_Central.secret}@@'\n\n#script\n# Get the JWT\n#jwt = '@@{calm_jwt}@@'\n\n\n# Check compute requirements are valid for OSS\nmin_vcpu = 10\nmin_memory_mib = 32768\n\nprint(\"Total vcpu count or total memory size can't be negative number - Adjusting...\")\nVCPU_COUNT = abs(@@{vcpu_count}@@)\nMEMORY_SIZE_MIB = abs(@@{total_memory_size_mib}@@)\n\nif  VCPU_COUNT < min_vcpu:\n    print(\"Total vcpu count can't be less than 10 - Adjusting...\")\n    VCPU_COUNT = min_vcpu\n    MEMORY_SIZE_MIB = min_memory_mib\nelse:\n    VCPU_COUNT = (VCPU_COUNT \/\/ min_vcpu) * min_vcpu\n    MEMORY_SIZE_MIB = (VCPU_COUNT \/\/ min_vcpu) * min_memory_mib\n\n\n# Set the headers, url, and payload\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n#headers = {'Content-Type': 'application\/json', 'Accept': 'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nurl     = \"https:\/\/@@{address}@@:9440\/oss\/api\/nutanix\/v3\/objectstores\"\npayload = {\n    \"api_version\": \"3.0\",\n    \"metadata\": {\n        \"kind\": \"objectstore\"\n    },\n    \"spec\": {\n        \"name\": \"@@{objectstore_name}@@\",\n        \"description\": \"@@{objectstore_name}@@\",\n        \"resources\": {\n            \"domain\": \"@@{domain_name}@@\",\n            \"aggregate_resources\": {\n                \"total_vcpu_count\": VCPU_COUNT,\n                \"total_memory_size_mib\": MEMORY_SIZE_MIB,\n                \"total_capacity_gib\": @@{total_capacity_gib}@@\n            },\n            \"buckets_infra_network_dns\": \"@@{infra_network_dns}@@\",\n            \"buckets_infra_network_reference\": {\n                \"kind\": \"subnet\",\n                \"uuid\": \"@@{INFRA}@@\"\n            },\n            \"buckets_infra_network_vip\": \"@@{infra_network_vip}@@\",\n            \"client_access_network_ip_list\": [\"@@{access_network_ip1}@@\", \"@@{access_network_ip2}@@\",\"@@{access_network_ip3}@@\", \"@@{access_network_ip4}@@\"],\n            \"client_access_network_reference\": {\n                \"kind\": \"subnet\",\n                \"uuid\": \"@@{CLIENT}@@\"\n            },\n            \"cluster_reference\": {\n                \"kind\": \"cluster\",\n                \"uuid\": \"@@{CLUSTER}@@\"\n            }\n        }\n    }\n}\n\n# Make the request\nresp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass, params=json.dumps(payload), headers=headers)\n# resp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)\n\n# If the request went through correctly, print it out.  Otherwise error out, and print the response.\nif resp.ok:\n    #for objectstore in json.loads(resp.content)['entities']:\n    objectstore = json.loads(resp.content)\n    if objectstore['spec']['name'] == '@@{objectstore_name}@@':\n\n        # If there's a default objectstore reference, print UUID to set variable and exit success, otherwise error out\n        if 'uuid' in objectstore['metadata']:\n            print \"OBJECTSTORE={0}\".format(objectstore['metadata']['uuid'])\n            exit (0)\n        else:\n            print \"For the '@@{objectstore_name}@@' object store - unable to find UUID.\"\n            exit(1)\n\n    # If we've reached this point in the code, none of our objectstores matched any objectstore name macro\n    print \"'@@{objectstore_name}@@' does not match any object store name in POST \/objectstores api call.\"\n    print json.dumps(json.loads(resp.content), indent=4)\n    exit(0)\nelse:\n    print \"Post request failed\", resp.content\n    exit(1)\n","eval_variables":["OBJECTSTORE"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"4f733952_runbook","main_task_local_reference":{"kind":"app_task","name":"1b0c6b26_dag"},"variable_list":[]},"name":"REST_Create"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"GetObjectstoreStatus"}],"name":"e066c73d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Object_Store"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"GetObjectstoreStatus","attrs":{"script":"# Set the credentials\npc_user = '@@{Prism_Central.username}@@'\npc_pass = '@@{Prism_Central.secret}@@'\n\n# script\n# Get the JWT\n# jwt = '@@{calm_jwt}@@\n\n# Set the headers, url, and payload\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n#headers = {'Content-Type': 'application\/json', 'Accept': 'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nurl     = \"https:\/\/@@{address}@@:9440\/oss\/api\/nutanix\/v3\/objectstores\/@@{OBJECTSTORE}@@\"\npayload = {}\n\n# Make the request\nresp = urlreq(url, verb='GET', auth='BASIC', user=pc_user, passwd=pc_pass, params=json.dumps(payload), headers=headers)\n\n# If the request went through correctly, print it out.  Otherwise error out, and print the response.\nif resp.ok:# check if its objectstore name matches and then print status info\n    objectstore = json.loads(resp.content)\n    if objectstore['spec']['name'] == \"@@{objectstore_name}@@\":\n        if 'state' in objectstore['status']:\n            print('\\nObjectstore current status')\n            print('--------------------------')\n            print('name\\t\\t%s' % objectstore['spec']['name'])\n            print('UUID\\t\\t%s' % objectstore['metadata']['uuid'])\n            print('state\\t\\t%s' % objectstore['status']['state'])\n            print('%%age completed:\\t%d' % objectstore['status']['percent_complete'])\n            print\n            exit(0)     \n        \n    # If we've reached this point in the code, none of our clusters matched any cluster name macro\n    print \"The '@@{objectstore_name}@@' objectstore does not match any objectstore names in our \/objectstores\/{UUID} api call.\"\n    print json.dumps(json.loads(resp.content), indent=4)\n    exit(0)\n     \nelse:\n    print \"Post request failed\", resp.content\n    exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"f558c1d5_runbook","main_task_local_reference":{"kind":"app_task","name":"e066c73d_dag"},"variable_list":[]},"name":"REST_Status"}],"name":"Objects","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"infra_network","value":"vlan.56","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"client_network","value":"vlan.64","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"cluster_name","value":"SAFC","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"infra_network_dns","value":"10.68.59.251","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"infra_network_vip","value":"10.68.59.252","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"access_network_ip1","value":"10.68.64.251","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"access_network_ip4","value":"10.68.64.254","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"vcpu_count","value":"10","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"total_memory_size_mib","value":"32768","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"total_capacity_gib","value":"5120","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"domain_name","value":"objects.nutanix.com","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"objectstore_name","value":"smartstore","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"access_network_ip2","value":"10.68.64.252","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"access_network_ip3","value":"10.68.64.253","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"Prism_Central"},"type":"USER"},"name":"ObjectStore_Create"},"api_version":"3.0","metadata":{"last_update_time":"1576155865430604","kind":"blueprint","spec_version":122,"creation_time":"1569598639737217","name":"ObjectStore_Create"}}